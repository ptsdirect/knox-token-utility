name: Release (Tag)

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build
        run: mvn -B -ntp clean verify

      - name: Compute checksum
        run: |
          JAR=$(ls target/knox-token-utility-*-jar-with-dependencies.jar)
          shasum -a 256 "$JAR" > SHA256SUMS
          echo "JAR_PATH=$JAR" >> $GITHUB_ENV
          if [ -f target/sbom.json ]; then echo "SBOM_JSON=target/sbom.json" >> $GITHUB_ENV; fi
          if [ -f target/sbom.xml ]; then echo "SBOM_XML=target/sbom.xml" >> $GITHUB_ENV; fi
          SPDX_JSON=$(ls target/site/*.spdx.json 2>/dev/null || true)
          if [ -n "$SPDX_JSON" ]; then echo "SPDX_JSON=$SPDX_JSON" >> $GITHUB_ENV; fi

      - name: Upload SBOM Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            target/sbom.json
            target/sbom.xml
            ${{ env.SPDX_JSON }}
          if-no-files-found: ignore

      - name: Import GPG key (for SBOM signing)
        if: env.GPG_PRIVATE_KEY != '' && env.GPG_PASSPHRASE != ''
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY || '' }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE || '' }}
        run: |
          echo "$GPG_PRIVATE_KEY" | base64 --decode | gpg --batch --import
          KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec:/ {print $5; exit}')
          echo "GPG_KEYID=$KEYID" >> $GITHUB_ENV

      - name: Sign SBOM / SPDX artifacts
        if: env.GPG_KEYID != ''
        run: |
          set -euo pipefail
          sign() {
            FILE="$1"; [ -f "$FILE" ] || return 0; gpg --batch --yes --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --armor --detach-sign "$FILE"; }
          export GPG_PASSPHRASE='${{ secrets.GPG_PASSPHRASE || '' }}'
          sign target/sbom.json
          sign target/sbom.xml
          if [ -n "${SPDX_JSON:-}" ]; then sign "$SPDX_JSON"; fi
        env:
          SPDX_JSON: ${{ env.SPDX_JSON }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE || '' }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.JAR_PATH }}
            SHA256SUMS
            target/sbom.json
            target/sbom.xml
            ${{ env.SPDX_JSON }}
            target/sbom.json.asc
            target/sbom.xml.asc
            ${{ env.SPDX_JSON }}.asc
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate build provenance (SLSA Attestation)
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: ${{ env.JAR_PATH }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign keyless sign artifacts
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          set -euo pipefail
          sign() { FILE="$1"; [ -f "$FILE" ] || return 0; cosign sign-blob --yes "$FILE" > "$FILE.sig" 2> "$FILE.siglog"; cosign verify-blob --certificate-oidc-issuer https://token.actions.githubusercontent.com --certificate-identity-regexp ".*" --signature "$FILE.sig" "$FILE" || echo "[warn] verification skipped"; }
          sign "$JAR_PATH"
          [ -f target/sbom.json ] && sign target/sbom.json || true
          [ -f target/sbom.xml ] && sign target/sbom.xml || true
          [ -n "${SPDX_JSON:-}" ] && sign "$SPDX_JSON" || true

      - name: Upload Cosign Signatures
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cosign-signatures
          path: |
            ${{ env.JAR_PATH }}.sig
            target/sbom.json.sig
            target/sbom.xml.sig
            ${{ env.SPDX_JSON }}.sig
          if-no-files-found: ignore
